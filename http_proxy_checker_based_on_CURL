#define CURL_STATICLIB
#include <curl/curl.h>

#include <iostream>
#include <fstream>
#include <string>
#include <vector>

// download from StackOwerflow
// content from site redirect to answer
static size_t WriteCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
	((std::string*)userp)->append((char*)contents, size * nmemb);
	return size * nmemb;
}


int main(void)
{
	CURL *curl;									//object CURL
	CURLcode res;									//object for result -> curl_easy_perform
	static std::string answer;
	std::string testAddr = "https://yandex.ru";					//duckduckgo.com or google.com or ...
	const char *urlAddr = testAddr.c_str();						// convert C++ std::string to C format


	std::vector<std::string> proxies;
	std::cout << "READING INFO FROM FILE" << std::endl << std::endl;
	std::fstream inputFile("input_proxy.txt");					// read proxies from FILE to VECTOR

	std::ofstream outGood;								// write Good proxies to FILE
	std::ofstream outBad;								// write Bad proxies to FILE
	outGood.open("out_GoodProxy.txt");
	outBad.open("out_BadProxy.txt");
	if (!outGood.is_open() || !outBad.is_open()) { std::cout << "ERROR opening  RESULT-file"; std::cin.get(); return 11; }

	std::string line;
	while (std::getline(inputFile, line))						// write data from INPUT.TXT to vector
	{
		proxies.push_back(line);
	}

	std::string* proxyVal = proxies.data();
	int count = proxies.size();

	std::cout << "start checking" << std::endl << std::endl;

	curl = curl_easy_init();							 // start INIT

	while (count > 0)
	{

		if (curl)															//check status, if ОК -> work with CURL options
		{
			curl_easy_setopt(curl, CURLOPT_URL, urlAddr);
			std::string two = *proxyVal;
			const char *proxy = two.c_str();				// convert C++ std::string to C format

			std::cout << *proxyVal << "\t";

			curl_easy_setopt(curl, CURLOPT_PROXY, proxy);			// set proxy for CURL-requests
			curl_easy_setopt(curl, CURLOPT_HEADER, 1L);			// 0L - don't show header info, 1L -show
			curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 3L);		// set "connection timeout" // complete connection within 3 seconds
			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);	// content from site redirect to answer
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &answer);		// content from site redirect to answer
			curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, false);		// disable SSL certificate verification


			res = curl_easy_perform(curl);	// call "curl_easy_perform" which processed REQUEST with OPTIONS and return result, if res == 0 -> OK, else -> ERROR
			if (!res)
			{
				std::cout << "\t" << "proxy OK";
				outGood << *proxyVal << "\n";
			}
			else { std::cout << "\t" << "proxy BAD"; outBad << *proxyVal << "\n"; }


			std::string codeStat(answer.begin(), std::find(answer.begin(), answer.end(), '\n'));  // get HTTP code answer 
			std::cout << "\t" << codeStat;
			std::cout << std::endl;

			answer.erase(answer.begin(), answer.end());			// delete previous content from site
		}

		count--;
		proxyVal++;
	}

	curl_easy_cleanup(curl);													// close curl session

	outGood.close();														    // close output file
	outBad.close();															    // close output file

	std::cout << std::endl << "stop checking";
	std::cin.get();															    // wait - don't close console

	return 0;
}
